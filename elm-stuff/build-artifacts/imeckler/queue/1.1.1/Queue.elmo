Elm.Queue = Elm.Queue || {};
Elm.Queue.make = function (_elm) {
   "use strict";
   _elm.Queue = _elm.Queue || {};
   if (_elm.Queue.values)
   return _elm.Queue.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Queue",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Queue$Internal = Elm.Queue.Internal.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var toList = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "Queue":
            return A2($Basics._op["++"],
              _v0._0,
              $List.reverse(_v0._1));}
         _U.badCase($moduleName,
         "on line 55, column 22 to 41");
      }();
   };
   var map = F2(function (g,_v4) {
      return function () {
         switch (_v4.ctor)
         {case "Queue":
            return A2($Queue$Internal.Queue,
              A2($List.map,g,_v4._0),
              A2($List.map,g,_v4._1));}
         _U.badCase($moduleName,
         "on line 52, column 21 to 55");
      }();
   });
   var length = function (_v8) {
      return function () {
         switch (_v8.ctor)
         {case "Queue":
            return $List.length(_v8._0) + $List.length(_v8._1);}
         _U.badCase($moduleName,
         "on line 49, column 22 to 51");
      }();
   };
   var isEmpty = function (q) {
      return function () {
         switch (q.ctor)
         {case "Queue":
            switch (q._0.ctor)
              {case "[]": switch (q._1.ctor)
                   {case "[]": return true;}
                   break;}
              break;}
         return false;
      }();
   };
   var pop = function (_v15) {
      return function () {
         switch (_v15.ctor)
         {case "Queue":
            return function () {
                 switch (_v15._0.ctor)
                 {case "::":
                    return $Maybe.Just({ctor: "_Tuple2"
                                       ,_0: _v15._0._0
                                       ,_1: A2($Queue$Internal.Queue,
                                       _v15._0._1,
                                       _v15._1)});
                    case "[]": return function () {
                         switch (_v15._1.ctor)
                         {case "[]":
                            return $Maybe.Nothing;}
                         return function () {
                            var _raw = $List.reverse(_v15._1),
                            $ = _raw.ctor === "::" ? _raw : _U.badCase($moduleName,
                            "on line 40, column 27 to 41"),
                            x = $._0,
                            f$ = $._1;
                            return $Maybe.Just({ctor: "_Tuple2"
                                               ,_0: x
                                               ,_1: A2($Queue$Internal.Queue,
                                               f$,
                                               _L.fromArray([]))});
                         }();
                      }();}
                 _U.badCase($moduleName,
                 "between lines 37 and 41");
              }();}
         _U.badCase($moduleName,
         "between lines 37 and 41");
      }();
   };
   var push = F2(function (x,
   _v23) {
      return function () {
         switch (_v23.ctor)
         {case "Queue":
            return A2($Queue$Internal.Queue,
              _v23._0,
              A2($List._op["::"],x,_v23._1));}
         _U.badCase($moduleName,
         "on line 34, column 23 to 36");
      }();
   });
   var empty = A2($Queue$Internal.Queue,
   _L.fromArray([]),
   _L.fromArray([]));
   _elm.Queue.values = {_op: _op
                       ,empty: empty
                       ,push: push
                       ,pop: pop
                       ,isEmpty: isEmpty
                       ,length: length
                       ,map: map
                       ,toList: toList};
   return _elm.Queue.values;
};